#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ArbreDeMerkle
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1c3595180c3a1e20
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ArbreDeMerkle est une Classe
      
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2032694737344601632
     type_code : 27
     code : |1+
      PROCEDURE Constructeur()
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 2032694737344667168
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
      
     type : 655360
   -
     name : _hashMerkle
     procedure_id : 2032696717372303580
     type_code : 12
     code : |1-
      // fonction de hash utilisée par l'arbre
      procédure _hashMerkle( h1 hash256, h2 hash256 ) : hash256
      
      // on concatène H1 et H2 en low endian
      buf est un buffer =  h1.toBufferLowEndian() + h2.toBufferLowEndian()
      // on calcule sha( sha( buf ))
      hResultat est hash256 
      hResultat.m_h  =  HashChaîne(HA_SHA_256, HashChaîne(HA_SHA_256,buf)) 
      
      renvoyer hResultat
     type : 458752
   -
     name : hCalculeRacine
     procedure_id : 2032695093827035595
     type_code : 12
     code : |1+
      // calcule le hash de la racine de l'arbre
      procédure hCalculeRacine( tabHash est un tableau de hash256  ): hash256
      dbgAssertion(tabHash.Occurrence()>=1)
      
      // si 1 seul élément, c'est la racine
      nbHash est un entier = tabHash.Occurrence()
      si nbHash=1 ALORS
      	renvoyer tabHash[1]
      FIN
      
      // calcul d'un tableau de taille nbHash/2
      tabHashNiveauParent est un tableau de hash256 
      pour i = 1 a nbHash pas 2
      	hashParent est hash256
      	// si on a les 2 éléments
      	si i+1<=nbHash ALORS
      		// HA_SHA_256
      		hashParent = _hashMerkle( tabHash[i], tabHash[i+1]  )
      	// si on  plus que 1 élément, on Hash avec soit meme
      	sinon
      		hashParent = _hashMerkle( tabHash[i], tabHash[i]    )
      	FIN
      	// ajout au tableau des nouvelle racine
      	tabHashNiveauParent.Ajoute(hashParent)
      FIN
      nouvelleTaille est un entier = tabHashNiveauParent.Occurrence()
      dbgAssertion((nouvelleTaille = nbHash / 2)  _ou_ (nouvelleTaille = (nbHash+1) / 2)  )
      
      // récursif
      renvoyer hCalculeRacine(tabHashNiveauParent)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1c3595060c37d8f9
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
